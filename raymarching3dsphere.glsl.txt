//creds to this site: https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/

const int MAX_MARCHING_STEPS = 225;
const float MIN_DIST = 0.0;
const float MAX_DIST = 100.0;
const float EPSILON = 0.0001;

float sphereSDF(vec3 p) {
    //sphere sdf centered at origin w r=1
    return length(p) - 1.0;
}

float sceneSDF(vec3 samplePoint) {
    //sdf for the scene
    //abs(return_value) = distance to surface, - means inside surface, + means outside
    //
    return sphereSDF(samplePoint);
}


vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {
    vec2 xy = fragCoord - size/2.0;
    float z = size.y / tan(radians(fieldOfView)/2.0);
    return normalize(vec3(xy, -z));
} 

//returning the shortest distance to the surface
float rayMarching(vec3 eye, vec3 marchingDirection, float start, float end) {
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        float dist = sceneSDF(eye + depth * marchingDirection);
        if (dist < EPSILON) {
            //inside scene surfafce
            return depth;
        }
        //along the view ray
        depth += dist;
    
        if (depth >= end) {
            return end;
        }
    }
    return end;
}

//estimating the normal using the gradient of the sdf for any point p on the surface
vec3 estimateNormal(vec3 p) {
    return normalize(vec3(
        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),
        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),
        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))
    ));
}

//now we are going to set up for the phong light model with a phongContribForLight 
//function that will be used in the actual phong loght model function
//vec3 returned gives the RGB color of the light's contribution at a point
//
// k_a: ambient color
// k_d: diffuse color
// k_s: specular color
// alpha: alpha
// p: position of point being lit
// eye: position of the camera
// lightPos: position of the light
// lightIntensitity: color or light
vec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity) {
    vec3 N = estimateNormal(p);
    vec3 L = normalize(lightPos - p);
    vec3 V = normalize(eye - p);
    vec3 R = normalize(reflect(-L, N));
    
    float dotLN = dot(L, N);
    float dotRV = dot(R, V);
    
    if (dotLN < 0.0) {
        //light not visible at p
        return vec3(0.0);
    }
    if (dotRV < 0.0) {
        //light reflection is opposite to the direction of the viewer... apply diffuse component only
        return lightIntensity * (k_d * dotLN);
    }
    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));
}

//this is the phong illumination function
// vec3 returned is the RBG color of the point p after applying lighting
// k_a: ambient color
// k_d: diffuse color
// k_s: specular color
// alpha: alpha
// p: position of point being lit
// eye: camera position 
vec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {
    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);
    vec3 color = ambientLight * k_a;
    
    vec3 light1Pos = vec3(4.0 * sin(iTime),
                          2.0,
                          4.0 * cos(iTime));
    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);
    
    color += phongContribForLight(k_d, k_s, alpha, p, eye,
                                  light1Pos,
                                  light1Intensity);
    
    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),
                          2.0 * cos(0.37 * iTime),
                          2.0);
    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);
    
    color += phongContribForLight(k_d, k_s, alpha, p, eye,
                                  light2Pos,
                                  light2Intensity);    
    return color;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);
    vec3 eye = vec3(0.0, 0.0, 5.0);
    float dist = rayMarching(eye, dir, MIN_DIST, MAX_DIST);
    
    if (dist > MAX_DIST - EPSILON) {
    //ray didnt hit
    fragColor = vec4(0.0);
    return;
    }
    
    //closest point on the surface along the ray
    vec3 p = eye + dist * dir;
    
    vec3 K_a = vec3(0.2, 0.2, 0.2);
    vec3 K_d = vec3(0.7, 0.2, 0.2);
    vec3 K_s = vec3(1.0, 1.0, 1.0);
    float shininess = 10.0;
    
    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);
    
    fragColor = vec4(color, 1.0);
}