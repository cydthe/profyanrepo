//creds to this site: https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/

const int MAX_MARCHING_STEPS = 225;
const float MIN_DIST = 0.0;
const float MAX_DIST = 100.0;
const float EPSILON = 0.0001;

float sphereSDF(vec3 p) {
    //sphere sdf centered at origin w r=1
    return length(p) - 1.0;
}

float sceneSDF(vec3 samplePoint) {
    //sdf for the scene
    //abs(return_value) = distance to surface, - means inside surface, + means outside
    //
    return sphereSDF(samplePoint);
}


vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {
    vec2 xy = fragCoord - size/2.0;
    float z = size.y / tan(radians(fieldOfView)/2.0);
    return normalize(vec3(xy, -z));
} 

//returning the shortest distance to the surface
float rayMarching(vec3 eye, vec3 marchingDirection, float start, float end) {
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        float dist = sceneSDF(eye + depth * marchingDirection);
        if (dist < EPSILON) {
            //inside scene surfafce
            return depth;
        }
        //along the view ray
        depth += dist;
    
        if (depth >= end) {
            return end;
        }
    }
    return end;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);
    vec3 eye = vec3(0.0, 0.0, 5.0);
    float dist = rayMarching(eye, dir, MIN_DIST, MAX_DIST);
    
    if (dist > MAX_DIST - EPSILON) {
    //ray didnt hit
    fragColor = vec4(0.0);
    return;
    }
    fragColor = vec4(1.0, 0.0, 0.0, 1.0);
}